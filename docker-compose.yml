services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: web-scrapper-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_NAME:-web_scrapper}
    volumes:
      - ./postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Construir imagen del scraper
  scraper:
    build:
      context: ./scraper
      dockerfile: Dockerfile
    image: splice-scraper:latest
    container_name: web-scrapper-scraper-builder
    command: echo "Scraper image built successfully"

  # API Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: web-scrapper-api:latest
    container_name: web-scrapper-api
    restart: unless-stopped
    ports:
      - "${PORT:-4000}:${PORT:-4000}"
    environment:
      PORT: ${PORT:-4000}
      ENV: ${ENV:-prod}
      # Variables de base de datos
      DB_HOST: ${DB_HOST:-postgres}
      DB_PORT: ${DB_PORT:-5432}
      DB_NAME: ${DB_NAME:-web_scrapper}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      # JWT y seguridad
      JWT_SECRECT: ${JWT_SECRECT:-change-this-in-production}
      ROUNDS_SALT: ${ROUNDS_SALT:-10}
      # CORS
      ORIGIN: ${ORIGIN:-http://localhost:5173}
    volumes:
      # Montar el socket de Docker para que la API pueda ejecutar contenedores
      - /var/run/docker.sock:/var/run/docker.sock
      # Volumen para almacenar audios temporales
      - ./api_audios:/app/audios
    depends_on:
      postgres:
        condition: service_healthy
      scraper:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:${PORT:-4000}/api/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Cliente Frontend
  client:
    image: nginx:alpine
    container_name: web-scrapper-client
    restart: unless-stopped
    ports:
      - "${CLIENT_PORT:-5173}:80"
    volumes:
      - ./client:/usr/share/nginx/html
      - ./client/nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      VITE_API_URL: ${VITE_API_URL:-http://localhost:4000}
    depends_on:
      - api

volumes:
  postgres_data:
    driver: local
  api_audios:
    driver: local
