version: '3.8'

services:
  # Base de datos PostgreSQL
  postgres:
    image: postgres:16-alpine
    container_name: web-scrapper-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-web_scrapper}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: web-scrapper-api
    restart: unless-stopped
    ports:
      - "${API_PORT:-4000}:4000"
    environment:
      PORT: 4000
      NODE_ENV: production
      # Variables de base de datos
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: ${POSTGRES_DB:-web_scrapper}
      DB_USER: ${POSTGRES_USER:-postgres}
      DB_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      # CORS y otros
      ORIGIN: ${ORIGIN:-http://localhost:5173}
      JWT_SECRET: ${JWT_SECRET:-your-secret-key-change-in-production}
    volumes:
      # Montar el socket de Docker para que la API pueda ejecutar contenedores
      - /var/run/docker.sock:/var/run/docker.sock
      # Volumen para almacenar audios temporales
      - api_audios:/app/audios
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:4000/api/health', (r) => process.exit(r.statusCode === 200 ? 0 : 1))"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Cliente Frontend (opcional, para desarrollo)
  client:
    image: nginx:alpine
    container_name: web-scrapper-client
    restart: unless-stopped
    volumes:
      - ./client:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - api

volumes:
  postgres_data:
    driver: local
  api_audios:
    driver: local
